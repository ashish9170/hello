class Author < ApplicationRecord
  has_one :book, dependent: :destroy
  accepts_nested_attributes_for :book
end



book

class Book < ApplicationRecord
  belongs_to :author
end


routes


Rails.application.routes.draw do
  resources :authors do
    resource :book
  end
  root "authors#index"
end




authorcontroller

class AuthorsController < ApplicationController
  def index
    @authors = Author.all
  end

  def show
    @author = Author.find(params[:id])
    @book = author.book || author.build_book
  end

  def new
    @author = Author.new
  end

  def create
    @author = Author.new(author_params)

    if author.save
      redirect_to author
    else
      render :new, status: :unprocessable_entity
    end
  end

  def edit
    @author = Author.find(params[:id])
  end

  def update
    @author = Author.find(params[:id])

    if author.update(author_params)
      redirect_to author
    else
      render :edit, status: :unprocessable_entity
    end
  end

  def destroy
    @author = Author.find(params[:id])
    author.destroy

    redirect_to authors_path, status: :see_other
  end

  private

  def author_params
    params.require(:author).permit(:first_name, :last_name)
  end
end




bookcontroller


class BooksController < ApplicationController
  before_action :set_author
  before_action :set_book, only: %i[show edit update destroy]

  def show
  end

  def new
    @book = author.build_book
  end

  def create
    @book = author.build_book(book_params)
    if book.save
      redirect_to [author, book], notice: 'Book was successfully created.'
    else
      render :new, status: :unprocessable_entity
    end
  end

  def edit
  end

  def update
    if book.update(book_params)
      redirect_to [author, book], notice: 'Book was successfully updated.'
    else
      render :edit, status: :unprocessable_entity
    end
  end

  def destroy
    @book.destroy
    redirect_to author_path(author), notice: 'Book was successfully destroyed.'
  end

  private

  def set_author
    @author = Author.find(params[:author_id])
  end

  def set_book
    @book = author.book
  end

  def book_params
    params.require(:book).permit(:title, :genre)
  end
end






app/views/authors/index.html.erb



<h1>Authors</h1>

<%= link_to 'New Author', new_author_path %>

<table>
  <thead>
    <tr>
      <th>First Name</th>
      <th>Last Name</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% authors.each do |author| %>
      <tr>
        <td><%= author.first_name %></td>
        <td><%= author.last_name %></td>
        <td><%= link_to 'Show', author %></td>
        <td><%= link_to 'Edit', edit_author_path(author) %></td>
        <td><%= link_to 'Destroy', author, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>





app/views/authors/show.html.erb


<h1><%= author.first_name %> <%= author.last_name %></h1>

<h2>Book</h2>
<% if author.book %>
  <p>
    <strong>Title:</strong>
    <%= author.book.title %>
  </p>
  <p>
    <strong>Genre:</strong>
    <%= author.book.genre %>
  </p>
  <ul>
    <li><%= link_to "Edit Book", edit_author_book_path(author, author.book) %></li>
    <li><%= link_to "Destroy Book", author_book_path(author, author.book), method: :delete, data: { confirm: 'Are you sure?' } %></li>
  </ul>
<% else %>
  <p>No book assigned to this author.</p>
<% end %>

<h2>Add/Edit Book:</h2>
<%= form_with(model: [ author, author.build_book ], local: true) do |form| %>
  <p>
    <%= form.label :title %><br>
    <%= form.text_field :title %>
  </p>
  <p>
    <%= form.label :genre %><br>
    <%= form.text_area :genre %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>

<%= link_to 'Back to Authors', authors_path %>



pp/views/authors/new.html.erb and app/views/authors/edit.html.erb


<%= form_with(model: author, local: true) do |form| %>
  <% if author.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(author.errors.count, "error") %> prohibited this author from being saved:</h2>

      <ul>
        <% author.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :first_name %>
    <%= form.text_field :first_name %>
  </div>

  <div class="field">
    <%= form.label :last_name %>
    <%= form.text_field :last_name %>
  </div>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>

<%= link_to 'Back', authors_path %>




app/views/books/new.html.erb and app/views/books/edit.html.erb


<%= form_with(model: [ author, book ], local: true) do |form| %>
  <% if book.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(book.errors.count, "error") %> prohibited this book from being saved:</h2>

      <ul>
        <% book.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :title %>
    <%= form.text_field :title %>
  </div>

  <div class="field">
    <%= form.label :genre %>
    <%= form.text_area :genre %>
  </div>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>

<%= link_to 'Back', author_path(author) %>
