rails generate model Task title:string description:text task_type:string status:string user:references assigned_user:references
rails generate model Comment content:text user:references task:references
rails db:migrate



user

class User < ApplicationRecord
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  has_many :tasks, foreign_key: :user_id, dependent: :destroy
  has_many :assigned_tasks, class_name: 'Task', foreign_key: :assigned_user_id, dependent: :destroy
  has_many :comments, dependent: :destroy
end



class Task < ApplicationRecord
  belongs_to :user
  belongs_to :assigned_user, class_name: 'User'
  has_many :comments, dependent: :destroy

  def display_name
    "#{title} - #{task_type} - #{status} (#{assigned_user.email})"
  end
end




class TasksController < ApplicationController
  before_action :authenticate_user!


  def new
    @task = Task.new
    @users = User.all # Load users directly here
  end

  def index
    @tasks = Task.all.includes(:assigned_user)
    @task = Task.new
    @task_options = @tasks.map do |task|
      ["#{task.title} - #{task.user.email} - #{task.status}", task.id]
    end
  end

  def show_comments
    @task = Task.find(params[:id])
    @comments = @task.comments.includes(:user)

    respond_to do |format|
      format.js   # This responds with JavaScript
    end
  end
  def create
    @task = Task.new(task_params)
    @task.user = current_user
    if @task.save
      redirect_to tasks_path, notice: 'Task was successfully created.'
    else
      @users = User.all # Load users again in case of validation failure
      render :new
    end
  end

  def show
    @task = Task.find(params[:id]) # Fetch the task directly here
    @comments = @task.comments.includes(:user)

    respond_to do |format|
      format.html # normal request
      format.js   # AJAX request
    end
  end

  private

  def task_params
    params.require(:task).permit(:title, :description, :task_type, :status, :assigned_user_id)
  end
end





<h1>Tasks</h1>
<%= link_to 'New Task', new_task_path, class: 'btn btn-primary' %>
<%= button_to 'Logout', destroy_user_session_path, method: :delete, class: 'btn btn-danger' %>

<div class="mt-4">
  <label for="task_select">Select a Task:</label>
  <select id="task_select" class="form-control">
    <option value="">-- Select a Task --</option>
    <% @task_options.each do |name, id| %>
      <option value="<%= id %>"><%= name %></option>
    <% end %>
  </select>
</div>

<div id="task_comments" class="mt-4">
  <!-- Comments will be loaded here -->
</div>

<script>
    $(document).ready(function() {
        $('#task_select').change(function() {
            alert();
            var taskId = $(this).val();
            if (taskId) {
                $.ajax({
                    url: '/tasks/' + taskId + '/show_comments',
                    dataType: 'script'
                });
            } else {
                $('#task_comments').html('');
            }
        });
    });
</script>



_comment



<% if @comments.present? %>
  <h3>Comments</h3>
  <ul>
    <% @comments.each do |comment| %>
      <li>
        <strong><%= comment.user.email %>:</strong>
        <%= comment.content %>
      </li>
    <% end %>
  </ul>
<% else %>
  <p>No comments for this task.</p>
<% end %>



_show_comments


$('#task_comments').html('<%= j render partial: "comment", locals: { comments: @comments } %>');


class CommentsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_task

  def create
    @comment = @task.comments.build(comment_params)
    @comment.user = current_user
    if @comment.save
      respond_to do |format|
        format.html { redirect_to @task, notice: 'Comment was successfully added.' }
        format.js   # Add this line
      end
    else
      render 'tasks/show'
    end
  end

  private

  def set_task
    @task = Task.find(params[:task_id])
  end

  def comment_params
    params.require(:comment).permit(:content)
  end
end



  def change
    create_table :tasks do |t|
      t.string :title
      t.text :description
      t.string :task_type
      t.string :status

      t.references :user, null: false, foreign_key: {to_table: :users}
      t.references :assign_user, null: false, foreign_key: {to_table: :users}

      t.timestamps
    end
  end
